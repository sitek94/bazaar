services:
  # --- Database Service (PostgreSQL) ---
  postgres:
    image: postgres:17.5-alpine
    container_name: bazaar_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - '${DB_PORT:-5432}:5432'
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - postgres_password

  # --- Database Admin Service (PgAdmin) ---
  pgadmin:
    image: dpage/pgadmin4:9.3
    container_name: bazaar_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/pgadmin_password
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    networks:
      - bazaar_internal_network
      - bazaar_external_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    secrets:
      - pgadmin_password

  # --- Cache Service (Redis) ---
  redis:
    image: redis:8-alpine
    container_name: bazaar_redis
    entrypoint: /usr/local/bin/entrypoint-redis.sh
    volumes:
      - redis_data:/data
      - ./redis/entrypoint-redis.sh:/usr/local/bin/entrypoint-redis.sh:ro
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD-SHELL', 'redis-cli -a $(cat /run/secrets/redis_password) ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    secrets:
      - redis_password
      - redis_user

  # --- Backend Service (Node.js API) ---
  backend:
    build: ./backend
    container_name: bazaar_backend
    environment:
      NODE_ENV: production
      PORT: 3000
      PG_HOST: postgres
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD_FILE: /run/secrets/postgres_password
      PG_DATABASE: ${POSTGRES_DB}
      PG_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USER_FILE: /run/secrets/redis_user
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    ports:
      - '${BACKEND_PORT:-3000}:3000'
    networks:
      - bazaar_internal_network
      - bazaar_external_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    secrets:
      - postgres_password
      - redis_password
      - redis_user
  # --- Frontend Service (Vite+React served by Nginx) ---
  frontend:
    build: ./frontend
    container_name: bazaar_frontend
    ports:
      - '${FRONTEND_PORT:-8080}:80'
    networks:
      - bazaar_external_network
    depends_on:
      - backend
    restart: unless-stopped

# --- Top-Level Named Volumes ---
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

# --- Top-Level Networks ---
networks:
  bazaar_internal_network:
    driver: bridge
  bazaar_external_network:
    driver: bridge

# --- Docker Secrets ---
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  redis_user:
    file: ./secrets/redis_user.txt
  pgadmin_password:
    file: ./secrets/pgadmin_password.txt
