services:
  # --- Reverse Proxy (Caddy) ---
  reverse_proxy:
    image: caddy:2.10.0-alpine
    container_name: bazaar_reverse_proxy
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      pgadmin:
        condition: service_started
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./reverse_proxy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./reverse_proxy/data:/data # Persistent Caddy data including certificates
      - caddy_config:/config
    networks:
      - bazaar_external_network
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://localhost/ || exit 1']
      interval: 30s
      timeout: 3s
      retries: 3
    mem_limit: 128M
    cpus: '0.25'
    pids_limit: 100

  # --- Database Service (PostgreSQL) ---
  postgres:
    image: postgres:17.5-alpine
    container_name: bazaar_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    mem_limit: 1G
    cpus: '1'
    pids_limit: 200
    secrets:
      - postgres_password

  # --- Database Admin Service (PgAdmin) ---
  pgadmin:
    image: dpage/pgadmin4:9.3
    container_name: bazaar_pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/pgadmin_password
    networks:
      - bazaar_internal_network
      - bazaar_external_network
    restart: unless-stopped
    mem_limit: 512M
    cpus: '0.5'
    pids_limit: 150
    healthcheck:
      test: ['CMD', 'wget', '-O', '-', 'http://localhost:80/misc/ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 140s
    secrets:
      - pgadmin_password

  # --- Cache Service (Redis) ---
  redis:
    image: redis:8.0.1-alpine
    container_name: bazaar_redis
    volumes:
      - redis_data:/data
      - ./redis/entrypoint-redis.sh:/usr/local/bin/entrypoint-redis.sh:ro
    entrypoint: /usr/local/bin/entrypoint-redis.sh
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a $(cat /run/secrets/redis_password) ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    mem_limit: 128M
    cpus: '0.5'
    pids_limit: 100
    secrets:
      - redis_password
      - redis_user

  # --- Backend Service (Hono) ---
  backend:
    build: ./backend
    container_name: bazaar_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT:-3000}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_USER_FILE: /run/secrets/redis_user
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://localhost:3000/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    mem_limit: 512M
    cpus: '0.75'
    pids_limit: 200
    secrets:
      - postgres_password
      - redis_password
      - redis_user

  # --- Frontend Service (Vite+React served by Nginx) ---
  frontend:
    build:
      context: ./frontend
      args:
        API_HOST: ${API_HOST}
    container_name: bazaar_frontend
    depends_on:
      - backend
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget --quiet --spider http://localhost/ || exit 1']
      interval: 30s
      timeout: 3s
      retries: 3
    mem_limit: 128M
    cpus: '0.25'
    pids_limit: 100

# --- Top-Level Named Volumes ---
volumes:
  caddy_config:
  postgres_data:
  pgadmin_data:
  redis_data:

# --- Top-Level Networks ---
networks:
  bazaar_internal_network:
    driver: bridge
    internal: true
  bazaar_external_network:
    driver: bridge

# --- Docker Secrets ---
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  redis_user:
    file: ./secrets/redis_user.txt
  pgadmin_password:
    file: ./secrets/pgadmin_password.txt
