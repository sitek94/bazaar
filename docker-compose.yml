services:
  # --- Database Service (PostgreSQL) ---
  postgres:
    image: postgres:15-alpine # Specific and lean image version [11]
    container_name: bazaar_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Named volume for data persistence [23]
      - ./postgres/init:/docker-entrypoint-initdb.d # Mount for initialization scripts [1]
    ports:
      - '${DB_PORT:-5432}:5432' # Expose for local tools/pgAdmin
    networks:
      - bazaar_internal_network
    restart: unless-stopped # Restart policy [24]
    healthcheck: # Health check for PostgreSQL [25, 26]
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # --- Database Admin Service (PgAdmin) ---
  pgadmin:
    image: dpage/pgadmin4:latest # Official PgAdmin image [12]
    container_name: bazaar_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80 # PgAdmin internal port
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Named volume for PgAdmin data [12]
    ports:
      - '${PGADMIN_PORT:-5050}:80' # Map host port to PgAdmin's internal port
    networks:
      - bazaar_internal_network # To connect to the DB
      - bazaar_external_network # To be accessible from the host
    depends_on:
      postgres:
        condition: service_healthy # Wait for DB to be healthy [25]
    restart: unless-stopped

  # --- Cache Service (Redis) ---
  cache:
    image: redis:7-alpine # Specific and lean Redis image [28]
    container_name: bazaar_cache
    command: redis-server --requirepass ${REDIS_PASSWORD} # Set password [29]
    volumes:
      - redis_data:/data # Named volume for Redis persistence [28]
    ports:
      - '${REDIS_PORT:-6379}:6379' # Expose Redis port
    networks:
      - bazaar_internal_network
    restart: unless-stopped
    healthcheck: # Health check for Redis
      test: ['CMD-SHELL', 'redis-cli -a ${REDIS_PASSWORD} ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # --- Backend Service (Node.js API) ---
  backend:
    build: ./backend
    container_name: bazaar_backend
    environment:
      NODE_ENV: production
      PORT: 3000 # Internal port for the backend service
      PG_HOST: postgres # Service name of PostgreSQL container
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_DATABASE: ${POSTGRES_DB}
      PG_PORT: 5432 # Internal PostgreSQL port
      REDIS_HOST: cache # Service name of Redis container
      REDIS_PORT: 6379 # Internal Redis port
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - '${BACKEND_PORT:-3000}:3000' # Map host port to backend's internal port
    networks:
      - bazaar_internal_network # To connect to DB and Cache
      - bazaar_external_network # To be accessible from frontend/host
    depends_on:
      postgres:
        condition: service_healthy
      cache:
        condition: service_healthy
    restart: unless-stopped
    healthcheck: # Health check for backend API
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # --- Frontend Service (Angular UI served by Nginx) ---
  frontend:
    build: ./frontend
    container_name: bazaar_frontend
    ports:
      - '${FRONTEND_PORT:-8080}:80' # Map host port to Nginx's internal port
    networks:
      - bazaar_external_network
    depends_on: # Optional, but good for ensuring backend might be ready
      - backend
    restart: unless-stopped

# --- Top-Level Named Volumes ---
# Define named volumes for data persistence [22, 23]
volumes:
  postgres_data:
    driver: local # Default driver
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

# --- Top-Level Networks ---
# Define custom networks for segmentation and security [22, 30]
networks:
  bazaar_internal_network: # For communication between backend, db, and cache
    driver: bridge
  bazaar_external_network: # For exposing frontend, API, and PgAdmin
    driver: bridge
